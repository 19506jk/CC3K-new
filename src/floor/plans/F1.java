package floor.plans;

import enums.MobType;
import enums.Square;
import floor.Cell;
import floor.Floor;

import java.util.Random;

import character.Enemy;
import character.Player;

public class F1 {

	final static int maxRow = 25;
	final static int maxCol = 79;
	
	private static int[][] map = new int[][]{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,3,5,5,5,5,5,5,5,2,5,5,5,5,5,3,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,3,5,5,5,5,5,5,5,2,5,5,5,5,5,3,5,5,5,5,5,5,2,1,1,1,3,3,1,1,1,1,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,3,5,5,5,5,5,5,5,2,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,1,1,1,1,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,3,3,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,3,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,4,4,4,0,0},
		{0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	};
		
	public static int[][] getMap(){
		return map;
	}
	
	public static void spawn(Cell[][] layout){
		int spawnCount = 0;
		
		Random ranGen = new Random();
		
		while (spawnCount < 25){
			int ranRow, ranCol, ranEne;
			do{
				ranRow = ranGen.nextInt(maxRow);
				ranCol = ranGen.nextInt(maxCol);
			}while(layout[ranRow][ranCol].getType() != Square.TILE);
			
			Enemy enemy = new Enemy(ranGen.nextInt(5));
			enemy.setFloor(Floor.getInst());
			layout[ranRow][ranCol].setOnCell(enemy);
			spawnCount++;
		}
		
		layout[10][5].setOnCell(Player.getPlayer());
	}
}
