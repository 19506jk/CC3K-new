package mechanics.floor.plans;

import java.util.Random;

import mechanics.character.Enemy;
import mechanics.character.Player;
import mechanics.character.Stair;
import mechanics.enums.Square;
import mechanics.floor.Cell;
import mechanics.floor.Floor;

public class F2 {
	
	final static int maxRow = 25;
	final static int maxCol = 79;
	
	private static int[][] map = new int[][]{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,5,2,5,5,5,5,5,3,5,5,5,5,5,5,2,5,5,5,5,5,5,5,2,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,5,2,5,5,5,5,5,3,5,5,5,5,5,5,2,1,1,1,3,3,1,1,1,1,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,3,5,5,5,5,5,5,5,2,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,1,1,1,1,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,3,3,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,3,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,2,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,3,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,2,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};
		
	public static int[][] getMap(){
		return map;
	}
	
	public static void spawn(Cell[][] layout){
		int spawnCount = 0;
		
		Random ranGen = new Random();
		
		layout[4][71].setOnCell(new Stair());
		
		while (spawnCount < 25){
			int ranRow, ranCol;
			do{
				ranRow = ranGen.nextInt(maxRow);
				ranCol = ranGen.nextInt(maxCol);
			}while(layout[ranRow][ranCol].getType() != Square.TILE || layout[ranRow][ranCol].getOnCell() != null);
			
			Enemy enemy = new Enemy(ranGen.nextInt(5));
			enemy.setCoord(ranRow, ranCol);
			enemy.setFloor(Floor.getInst());
			layout[ranRow][ranCol].setOnCell(enemy);
			spawnCount++;
		}
		
		layout[10][5].setOnCell(Player.getPlayer());
		Player.getPlayer().setCoord(10, 5);
		Player.getPlayer().setFloor(Floor.getInst());
	}
}
